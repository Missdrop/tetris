/* 全局函数原型头文件 */

#ifndef _FUNCTIONS_H_INCLUDED
#define _FUNCTIONS_H_INCLUDED
#include <stdbool.h>

extern void bagseven(char *previewbag);
/*-----------------------------------------------------------------
输入值：块序数组的地址
目标：  实现bag7出块(以7个方块[O,S,Z,L,J,T,I]为一组，随机排序)
-------------------------------------------------------------------*/

extern void printfield(char (*field)[12]);
/*-----------------------------------------------------------------
输入值：当前场地（数组指针）
目标：  打印场地（递归每一项，每行换行一次，第一列和最后一列之前加上|分隔符）
-------------------------------------------------------------------*/

extern bool spawn(char (*field)[12], const char block);
/*-----------------------------------------------------------------
输入值：当前场地（数组指针），下一个方块
目标：  判断是否可以生成方块（判断方式同movement函数），是则生成方块并返回true，否则返回false
返回值：一个bool值（作为if的判断条件，false则调用gameover函数，true则继续后续操作）
-------------------------------------------------------------------*/

extern bool movement(char (*field)[12], const char block, const char direction);
/*-----------------------------------------------------------------
输入值： 当前场地（数组指针），当前方块，移动方向（1为下，2为左，3为右）
目标：
    1.  无效操作返回false
    2.  判断当前方块（melloc一块内存，copy当前场地，判断完毕后free）向指定移动方向是否具备移动能力（若移动后某格数据为2或在墙边，则不可移动），
        是则继续运行，否则返回false，退出函数
    3.  判断当前方块是否触底（判断方式同上），否则继续运行，是则返回true，退出函数
    4.  移动方块，使用数组指针修改场地，返回false
返回值：一个bool值（作为if判断的条件，true则停止读取用户输入操作，生成下一个方块，false则继续循环）
可能存在的优化：
    A： 将2，3两步骤合而为一以避免多次melloc
    B： 只copy方块附近的场地以减少内存占用
-------------------------------------------------------------------*/

extern bool rotation(char (*field)[12], const char block, const char direction);
/*-----------------------------------------------------------------
输入值：当前场地（数组指针），当前方块，旋转方向
目标：
    1.  无效操作直接退出函数
    2.  判断当前方块（判断方式同movement函数）向指定移动方向是否具备旋转能力，是则旋转并打印场地，返回true，否则继续运行
    3.  进行踢墙检测，成功则放置方块并打印场地，返回false，四次检测均失败则退出函数，返回false
返回值：一个bool值（作为if条件，true则进行下一个循环，false则继续后续操作（消行检测））
-------------------------------------------------------------------*/

extern bool clear(char (*field)[12], int *score);
/*-----------------------------------------------------------------
输入值：当前场地（数组指针），分数
目标：  检测场地是否需要消行（自下而上遍历场地，若存在某一行求和值为10则已满），
        是则消除该行（将该行以上区域遍历并下移），并增加分数，返回true，否则返回false
返回值：一个bool值，作为while循环的条件使用（实现循环直至没有可以消除的行）
-------------------------------------------------------------------*/

extern void gameover(int score);
/*-----------------------------------------------------------------
输入值：分数
目标：  展示游戏结束画面以及获得的分数
-------------------------------------------------------------------*/

#endif